package com.mockpage.schoolwebapp.parentportal.parent.controller;

import java.util.Optional;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.mockpage.schoolwebapp.parentportal.parent.model.Parent;
import com.mockpage.schoolwebapp.parentportal.parent.service.ParentService;

@Controller
public class ParentController {

	@Autowired
	ParentService parentservice;
	
	@GetMapping({"/","/parent"})
	public String adminForm(Model model) {
		model.addAttribute("parent",new Parent());		
		return "parent_form";
	}
		
	@PostMapping("/parent")
	public String parentSubmit(
			@Valid @ModelAttribute("parent") Parent parent,
			BindingResult result, 
			Model model) {
		if(result.hasErrors()) {
			return "parent_form";
		}		
		
		 
		model.addAttribute("parent", parent);
		parentservice.save(parent);

		return "parent_portal";
	}
	
	@GetMapping("/login")
	public String parentLogin(Model model) {
		model.addAttribute("parent", new Parent());
		return "login";
	}
	
	@PostMapping("/login")
	public String parentLogin(Model model,
			@Valid @RequestParam String userId, 
			@Valid @RequestParam String password) {		
		if(parentservice.existsBystudentId(userId)) {
			Optional<Parent> parent =	parentservice.findBystudentId(userId);
			if(password.equals(parent.get().getPassword())) {
				model.addAttribute(parent.get());
				return "parent_portal";
			}
			else {
				model.addAttribute("errormsg","password is wrong");
				return "login";
			}
		}
		else {
			model.addAttribute("usererr", "This account does not exist.");
			return "login";
		}
	}
	
	@GetMapping("/{studentId}/profile")
	public String parentProfile(@PathVariable String studentId,Model model) {
		Optional<Parent> parent = parentservice.findBystudentId(studentId);
		model.addAttribute("parent", parent.get());
		return "profile";
	}

	@GetMapping("/{studentId}/notifications")
	public String parentNotifications(@PathVariable String studentId,Model model) {
		Optional<Parent> parent = parentservice.findBystudentId(studentId);
		model.addAttribute("parent", parent.get());
		return "notifications";
	}

	@GetMapping("/{studentId}/settings")
	public String parentSettings(@PathVariable String studentId,Model model) {
		Optional<Parent> parent = parentservice.findBystudentId(studentId);
		model.addAttribute("parent", parent.get());
		return "settings";
	}

	@PutMapping("/{studentId}/edit")
	public String editparent(@PathVariable String studentId,
			Model model) {
		Optional<Parent> parent = parentservice.findBystudentId(studentId);
		model.addAttribute("parent", parent.get());
		return "parent_form";
	}
	
	@DeleteMapping("/{studentId}/remove")
	public String deleteparent(@PathVariable String studentId,
			Model model) {
		Optional<Parent> parent = parentservice.findBystudentId(studentId);
		parentservice.delete(parent);
		model.addAttribute("message","this account has been deleted");
		return "parent_form";
	}

}
